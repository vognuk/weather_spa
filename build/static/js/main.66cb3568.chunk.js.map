{"version":3,"sources":["components/SearchBar/SearchBar.module.css","core/constants/variables.js","core/utils/getWeatherURL.js","components/WeatherBlock/WeatherBlock.js","core/store/initialWeatherData.js","hoc/withFetch.js","views/MainPage.js","components/SearchBar/SearchBar.js","App.js","reportWebVitals.js","index.js"],"names":["module","exports","variables","API_KEY","getWeatherURL","CURRENT_CITY_URL","navigator","geolocation","getCurrentPosition","position","coords","latitude","longitude","sessionStorage","setItem","WeatherBlock","data","heading","name","useState","main","temp","setTemp","weather","description","iconAlt","setIconAlt","icon","setIcon","useEffect","className","classNames","bind","s","cx","hide","wraper","minusTen","ten","plusThirteen","getItem","failedResult","container","autoClose","hideProgressBar","newestOnTop","closeOnClick","rtl","pauseOnFocusLoss","draggable","pauseOnHover","String","src","alt","Math","round","slider","min","max","value","step","onChange","e","newTemp","forceNumber","target","toast","warn","progress","undefined","initialWeatherData","coord","lon","lat","id","iconURL","base","feels_like","temp_min","temp_max","pressure","humidity","sea_level","grnd_level","visibility","wind","speed","deg","gust","clouds","all","dt","sys","type","country","sunrise","sunset","timezone","cod","withFetch","WrappedInHOCComponent","requestUrl","props","setData","isLoading","setIsLoading","isError","setIsError","a","axios","result","getData","MainPage","WeatherWithFetch","CityWeatherWithFetch","SearchBar","setReload","initualValue","setInitialValue","CITY_URL","searchBar","form","onSubmit","preventDefault","error","button","buttonLabel","input","autoComplete","autoFocus","placeholder","currentTarget","toLowerCase","App","reload","initialValue","window","addEventListener","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iIACAA,EAAOC,QAAU,CAAC,UAAY,6BAA6B,KAAO,wBAAwB,OAAS,0BAA0B,YAAc,+BAA+B,MAAQ,2B,iMCGnKC,EAJG,CAChBC,QAAS,oCCaIC,EAZO,WACpB,IAAIC,EAAmB,GAGrBC,UAAUC,YAAYC,oBAAmB,SAACC,GACxCJ,EAAgB,8DAA0DI,EAASC,OAAOC,SAA1E,gBAA0FF,EAASC,OAAOE,UAA1G,+BAA0IV,EAAUC,SACpKU,eAAeC,QAAQ,mBAAoBT,O,gCCgGlCU,G,MA/FM,SAAC,GAAuB,IAAD,MAApBC,EAAoB,EAApBA,KAAMC,EAAc,EAAdA,QAC5BJ,eAAeC,QAAQ,oBAAqBE,EAAKE,MACjD,MAAwBC,mBAAQ,UAACH,EAAKI,YAAN,aAAC,EAAWC,MAA5C,mBAAOA,EAAP,KAAaC,EAAb,KACA,EAA8BH,mBAAQ,UAACH,EAAKO,eAAN,aAAC,EAAcC,aAArD,mBAAOC,EAAP,KAAgBC,EAAhB,KACA,EAAwBP,mBAAQ,UAACH,EAAKO,QAAQ,UAAd,aAAC,EAAiBI,MAAlD,mBAAOA,EAAP,KAAaC,EAAb,KAEAC,qBAAU,WAAO,IAAD,MACdP,EAAO,UAACN,EAAKI,YAAN,aAAC,EAAWC,MACnBK,EAAU,UAACV,EAAKO,eAAN,aAAC,EAAcC,aACzBI,EAAO,UAACZ,EAAKO,QAAQ,UAAd,aAAC,EAAiBI,QACxB,CAACX,IAGJ,IAaIc,EADKC,IAAWC,KAAKC,IACTC,CAAG,CACjBC,KAAoB,SAAdnB,EAAKE,KACXkB,QAAQ,EACRC,SAAUhB,GAAQ,GAClBiB,IAAKjB,GAAQ,GACbkB,aAAclB,GAAQ,KAYxB,OAFAjB,IAGE,oCAEKa,EACe,SAAdD,EAAKE,KACH,oCACGL,eAAe2B,QAAQ,aACtB,uBAAGV,UAAWG,IAAEQ,cAAhB,2CAMJ,6BAASX,UAAWG,IAAES,WACpB,kBAAC,IAAD,CACEjC,SAAS,YACTkC,UAAW,IACXC,iBAAiB,EACjBC,aAAa,EACbC,cAAY,EACZC,KAAK,EACLC,kBAAgB,EAChBC,WAAS,EACTC,cAAY,IAEd,yBAAKpB,UAAWA,GACd,4BAAKb,GACL,gCAAMkC,QAAW,OAAJnC,QAAI,IAAJA,OAAA,EAAAA,EAAME,OAAQ,KAC3B,yBACEkC,IAAG,2CAAsCzB,EAAtC,WACH0B,IAAK5B,IAEP,4BAAK0B,OAAOG,KAAKC,MAAMlC,IAAvB,SAEa,4BAAZJ,GACC,kBAAC,iBAAD,CACEa,UAAWG,IAAEuB,OACbC,KAAM,GACNC,IAAK,GACLC,MAAOtC,EACPuC,KAAM,EACNC,SAjDD,SAACC,GAChB,IAAMC,EAAUC,IAAYF,EAAEG,OAAON,OACrCrC,EAAQyC,GAvBRG,IAAMC,KAAK,kDAAmD,CAC5D1D,SAAU,YACVkC,UAAW,IACXC,iBAAiB,EACjBE,cAAc,EACdI,cAAc,EACdD,WAAW,EACXmB,cAAUC,Y,yCCkBDC,EAhDY,CACzBC,MAAO,CACLC,IAAK,QACLC,IAAK,SAEPlD,QAAS,CACP,CACEmD,GAAI,IACJtD,KAAM,SACNI,YAAa,aACbG,KAAM,GACNgD,QAAS,KAGbC,KAAM,WACNxD,KAAM,CACJC,KAAM,EACNwD,WAAY,MACZC,SAAU,MACVC,SAAU,MACVC,SAAU,KACVC,SAAU,GACVC,UAAW,KACXC,WAAY,MAEdC,WAAY,IACZC,KAAM,CACJC,MAAO,KACPC,IAAK,IACLC,KAAM,MAERC,OAAQ,CACNC,IAAK,IAEPC,GAAI,WACJC,IAAK,CACHC,KAAM,EACNnB,GAAI,QACJoB,QAAS,KACTC,QAAS,WACTC,OAAQ,YAEVC,SAAU,MACVvB,GAAI,OACJxD,KAAM,OACNgF,IAAK,KCVQC,EA7BG,SAAClF,EAASmF,EAAuBC,GACjD,OAAO,SAACC,GACN,MAAwBnF,mBAASmD,GAAjC,mBAAOtD,EAAP,KAAauF,EAAb,KACA,EAAkCpF,oBAAS,GAA3C,mBAAOqF,EAAP,KAAkBC,EAAlB,KACA,EAA8BtF,oBAAS,GAAvC,mBAAOuF,EAAP,KAAgBC,EAAhB,KAYA,OAVA9E,oBAAS,sBAAC,4BAAA+E,EAAA,+EAEeC,IAAMR,GAFrB,OAEAS,EAFA,OAGNP,EAAQO,EAAO9F,MACfyF,GAAa,GAJP,gDAMNE,GAAW,GANL,yDAQP,CAACN,IAGF,kBAACD,EAAD,eACEpF,KAAMA,EACNwF,UAAWA,EACXE,QAASA,GACLJ,EAJN,CAKES,QAAS,SAACV,GAAD,OAAgBQ,IAAMR,IAC/BpF,QAASA,OCJF+F,EArBE,WACf,IAAMC,EAAmBd,EACvB,oBACApF,EACAF,eAAe2B,QAAQ,aAGnB0E,EAAuBf,EAC3B,0BACApF,EACAF,eAAe2B,QAAQ,qBAGzB,OACE,oCACE,kBAACyE,EAAD,MACA,kBAACC,EAAD,Q,wBCqCSC,EAlDG,SAAC,GAAmB,IAAjBC,EAAgB,EAAhBA,UACnB,EAAwCjG,qBAAxC,mBAAOkG,EAAP,KAAqBC,EAArB,KACIC,EAAW,GAyBf,OACE,6BAASzF,UAAWG,IAAEuF,WACpB,0BAAM1F,UAAWG,IAAEwF,KAAMC,SAdR,SAAC5D,GACpBA,EAAE6D,iBAEGN,GAILD,GAAU,GACVE,EAAgB,IAChBlH,KALE8D,IAAM0D,MAAM,6BAWV,4BAAQ/B,KAAK,SAAS/D,UAAWG,IAAE4F,QACjC,0BAAM/F,UAAWG,IAAE6F,aACjB,kBAAC,IAAD,MADF,WAKF,2BACEhG,UAAWG,IAAE8F,MACblC,KAAK,OACLmC,aAAa,MACbC,WAAS,EACTC,YAAY,gCACZvE,MAAO0D,EACPxD,SAvCkB,SAACC,GAKzBwD,EAAgBxD,EAAEqE,cAAcxE,MAAMyE,eAEtCb,EAAQ,4DAAwDzD,EAAEqE,cAAcxE,MAAxE,+BAAoGzD,EAAUC,SACtHU,eAAeC,QAAQ,WAAYyG,SCaxBc,MA3Bf,WACE,MAA4BlH,qBAA5B,mBAAOmH,EAAP,KAAelB,EAAf,KACA,EAAwCjG,qBAAxC,mBAAOoH,EAAP,KAAqBjB,EAArB,KAQA,OANAzF,qBAAU,WACRuF,GAAU,KACT,CAACkB,IAEJE,OAAOC,iBAAiB,QAAQ,SAAC3E,OAG/B,yBAAKhC,UAAU,OACb,gCACE,kBAAC,EAAD,CACEsF,UAAWA,EACXE,gBAAiBA,EACjBiB,aAAcA,KAGlB,8BACE,kBAAC,EAAD,OAEF,mCCfSG,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.66cb3568.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"searchBar\":\"SearchBar_searchBar__26N0D\",\"form\":\"SearchBar_form__12DZ1\",\"button\":\"SearchBar_button__3Rd-o\",\"buttonLabel\":\"SearchBar_buttonLabel__1Hf79\",\"input\":\"SearchBar_input__33Xx1\"};","const variables = {\r\n  API_KEY: \"e04d5811cb452e53253fd27c4c26cb5f\",\r\n};\r\n\r\nexport default variables;\r\n","import variables from \"../constants/variables\";\r\n\r\nconst getWeatherURL = () => {\r\n  let CURRENT_CITY_URL = \"\";\r\n\r\n  const onGetPositionSuccess = (position) => {\r\n    navigator.geolocation.getCurrentPosition((position) => {\r\n      CURRENT_CITY_URL = `https://api.openweathermap.org/data/2.5/weather?lat=${position.coords.latitude}&lon=${position.coords.longitude}&units=metric&appid=${variables.API_KEY}`;\r\n      sessionStorage.setItem(\"CURRENT_CITY_URL\", CURRENT_CITY_URL);\r\n    });\r\n  };\r\n  onGetPositionSuccess();\r\n};\r\n\r\nexport default getWeatherURL;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport s from \"./WeatherBlock.css\";\r\nimport classNames from \"classnames/bind\";\r\nimport getWeatherURL from \"../../core/utils/getWeatherURL\";\r\nimport { RangeStepInput } from \"react-range-step-input\";\r\nimport forceNumber from \"force-number\";\r\nimport { ToastContainer, toast } from \"react-toastify\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\n\r\nconst WeatherBlock = ({ data, heading }) => {\r\n  sessionStorage.setItem(\"current_city_name\", data.name);\r\n  const [temp, setTemp] = useState(data.main?.temp);\r\n  const [iconAlt, setIconAlt] = useState(data.weather?.description);\r\n  const [icon, setIcon] = useState(data.weather[0]?.icon);\r\n\r\n  useEffect(() => {\r\n    setTemp(data.main?.temp);\r\n    setIconAlt(data.weather?.description);\r\n    setIcon(data.weather[0]?.icon);\r\n  }, [data]);\r\n\r\n  //Show warning after changing temperature value by slider.\r\n  const notifyTempCangeForced = () =>\r\n    toast.warn(\"Temperature value is false! Please reload page.\", {\r\n      position: \"top-right\",\r\n      autoClose: 5000,\r\n      hideProgressBar: false,\r\n      closeOnClick: true,\r\n      pauseOnHover: true,\r\n      draggable: true,\r\n      progress: undefined,\r\n    });\r\n\r\n  //Multiclass switch by https://www.npmjs.com/package/classnames for temperature color switcher.\r\n  let cx = classNames.bind(s);\r\n  let className = cx({\r\n    hide: data.name === \"City\",\r\n    wraper: true,\r\n    minusTen: temp <= 10,\r\n    ten: temp >= 10,\r\n    plusThirteen: temp >= 30,\r\n  });\r\n\r\n  //Handling of slider move.\r\n  const onChange = (e) => {\r\n    const newTemp = forceNumber(e.target.value);\r\n    setTemp(newTemp);\r\n    notifyTempCangeForced();\r\n  };\r\n\r\n  getWeatherURL();\r\n\r\n  return (\r\n    <>\r\n      {\r\n        (heading =\r\n          data.name === \"City\" ? (\r\n            <>\r\n              {sessionStorage.getItem(\"CITY_URL\") && (\r\n                <p className={s.failedResult}>\r\n                  no results or city name is not correct\r\n                </p>\r\n              )}\r\n            </>\r\n          ) : (\r\n            <section className={s.container}>\r\n              <ToastContainer\r\n                position=\"top-right\"\r\n                autoClose={5000}\r\n                hideProgressBar={false}\r\n                newestOnTop={false}\r\n                closeOnClick\r\n                rtl={false}\r\n                pauseOnFocusLoss\r\n                draggable\r\n                pauseOnHover\r\n              />\r\n              <div className={className}>\r\n                <h2>{heading}</h2>\r\n                <h2> {String(data?.name || \"\")}</h2>\r\n                <img\r\n                  src={`http://openweathermap.org/img/wn/${icon}@2x.png`}\r\n                  alt={iconAlt}\r\n                ></img>\r\n                <h1>{String(Math.round(temp))} &deg;</h1>\r\n\r\n                {heading === \"Current city weather in\" && (\r\n                  <RangeStepInput\r\n                    className={s.slider}\r\n                    min={-30}\r\n                    max={40}\r\n                    value={temp}\r\n                    step={1}\r\n                    onChange={onChange}\r\n                  />\r\n                )}\r\n              </div>\r\n            </section>\r\n          ))\r\n      }\r\n    </>\r\n  );\r\n};\r\n\r\nexport default WeatherBlock;\r\n","const initialWeatherData = {\r\n  coord: {\r\n    lon: 30.9494,\r\n    lat: 49.9188,\r\n  },\r\n  weather: [\r\n    {\r\n      id: 801,\r\n      main: \"Clouds\",\r\n      description: \"few clouds\",\r\n      icon: \"\",\r\n      iconURL: \"\",\r\n    },\r\n  ],\r\n  base: \"stations\",\r\n  main: {\r\n    temp: 0,\r\n    feels_like: 10.28,\r\n    temp_min: 10.68,\r\n    temp_max: 11.78,\r\n    pressure: 1020,\r\n    humidity: 56,\r\n    sea_level: 1020,\r\n    grnd_level: 1001,\r\n  },\r\n  visibility: 10000,\r\n  wind: {\r\n    speed: 3.16,\r\n    deg: 320,\r\n    gust: 3.73,\r\n  },\r\n  clouds: {\r\n    all: 15,\r\n  },\r\n  dt: 1634461275,\r\n  sys: {\r\n    type: 2,\r\n    id: 2034980,\r\n    country: \"UA\",\r\n    sunrise: 1634444454,\r\n    sunset: 1634482911,\r\n  },\r\n  timezone: 10800,\r\n  id: 694992,\r\n  name: \"City\",\r\n  cod: 200,\r\n};\r\n\r\nexport default initialWeatherData;\r\n","/* eslint-disable react-hooks/exhaustive-deps */\r\nimport React, { useEffect, useState } from \"react\";\r\nimport axios from \"axios\";\r\n\r\nimport initialWeatherData from \"../core/store/initialWeatherData\";\r\n\r\nconst withFetch = (heading, WrappedInHOCComponent, requestUrl) => {\r\n  return (props) => {\r\n    const [data, setData] = useState(initialWeatherData);\r\n    const [isLoading, setIsLoading] = useState(false);\r\n    const [isError, setIsError] = useState(false);\r\n\r\n    useEffect(async () => {\r\n      try {\r\n        const result = await axios(requestUrl);\r\n        setData(result.data);\r\n        setIsLoading(false);\r\n      } catch (error) {\r\n        setIsError(true);\r\n      }\r\n    }, [requestUrl]);\r\n\r\n    return (\r\n      <WrappedInHOCComponent\r\n        data={data}\r\n        isLoading={isLoading}\r\n        isError={isError}\r\n        {...props}\r\n        getData={(requestUrl) => axios(requestUrl)}\r\n        heading={heading}\r\n      />\r\n    );\r\n  };\r\n};\r\n\r\nexport default withFetch;\r\n","import React from \"react\";\r\nimport WeatherBlock from \"../components/WeatherBlock/WeatherBlock\";\r\nimport withFetch from \"../hoc/withFetch\";\r\n\r\nconst MainPage = () => {\r\n  const WeatherWithFetch = withFetch(\r\n    \"Search result for\",\r\n    WeatherBlock,\r\n    sessionStorage.getItem(\"CITY_URL\")\r\n  );\r\n\r\n  const CityWeatherWithFetch = withFetch(\r\n    \"Current city weather in\",\r\n    WeatherBlock,\r\n    sessionStorage.getItem(\"CURRENT_CITY_URL\")\r\n  );\r\n\r\n  return (\r\n    <>\r\n      <WeatherWithFetch />\r\n      <CityWeatherWithFetch />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default MainPage;\r\n","import React, { useState } from \"react\";\r\nimport { ImSearch } from \"react-icons/im\";\r\nimport { toast } from \"react-toastify\";\r\nimport s from \"./SearchBar.module.css\";\r\nimport getWeatherURL from \"../../core/utils/getWeatherURL\";\r\nimport variables from \"../../core/constants/variables\";\r\n\r\nconst SearchBar = ({ setReload }) => {\r\n  const [initualValue, setInitialValue] = useState();\r\n  let CITY_URL = \"\";\r\n\r\n  const handleInputChange = (e) => {\r\n    // if (/[а-яё]+/i.test(e.currentTarget.value)) {\r\n    //   toast.error(\"Only English.\");\r\n    //   e.currentTarget.value = \"\";\r\n    // }\r\n    setInitialValue(e.currentTarget.value.toLowerCase());\r\n\r\n    CITY_URL = `https://api.openweathermap.org/data/2.5/weather?q=${e.currentTarget.value}&units=metric&appid=${variables.API_KEY}`;\r\n    sessionStorage.setItem(\"CITY_URL\", CITY_URL);\r\n  };\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n\r\n    if (!initualValue) {\r\n      toast.error(\"Please enter city name.\");\r\n      return;\r\n    }\r\n    setReload(true);\r\n    setInitialValue(\"\");\r\n    getWeatherURL();\r\n  };\r\n\r\n  return (\r\n    <section className={s.searchBar}>\r\n      <form className={s.form} onSubmit={handleSubmit}>\r\n        <button type=\"submit\" className={s.button}>\r\n          <span className={s.buttonLabel}>\r\n            <ImSearch />\r\n            Search\r\n          </span>\r\n        </button>\r\n        <input\r\n          className={s.input}\r\n          type=\"text\"\r\n          autoComplete=\"off\"\r\n          autoFocus\r\n          placeholder=\"Search weather in the city...\"\r\n          value={initualValue}\r\n          onChange={handleInputChange}\r\n        />\r\n      </form>\r\n    </section>\r\n  );\r\n};\r\n\r\nexport default SearchBar;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport \"./App.css\";\r\nimport MainPage from \"./views/MainPage\";\r\nimport SearchBar from \"./components/SearchBar/SearchBar\";\r\n\r\nfunction App() {\r\n  const [reload, setReload] = useState();\r\n  const [initialValue, setInitialValue] = useState();\r\n\r\n  useEffect(() => {\r\n    setReload(false);\r\n  }, [reload]);\r\n\r\n  window.addEventListener(\"load\", (e) => {});\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <header>\r\n        <SearchBar\r\n          setReload={setReload}\r\n          setInitialValue={setInitialValue}\r\n          initialValue={initialValue}\r\n        />\r\n      </header>\r\n      <main>\r\n        <MainPage />\r\n      </main>\r\n      <footer></footer>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport reportWebVitals from \"./reportWebVitals\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}